{
  "version": 3,
  "sources": ["../../src/data-grid-overlay-editor/private/Users/pzich/Projects/pzcfg/glide-data-grid/packages/core/src/data-grid-overlay-editor/private/number-overlay-editor.tsx", "../../src/data-grid-overlay-editor/private/Users/pzich/Projects/pzcfg/glide-data-grid/packages/core/src/data-grid-overlay-editor/private/number-overlay-editor-style.tsx"],
  "sourcesContent": ["import * as React from \"react\";\nimport { NumberOverlayEditorStyle } from \"./number-overlay-editor-style\";\nimport { NumericFormat } from \"react-number-format\";\nimport type { SelectionRange } from \"../../data-grid/data-grid-types\";\nimport type { NumberFormatValues } from \"react-number-format/types/types\";\n\ninterface Props {\n    value: number | undefined;\n    disabled?: boolean;\n    onChange: (values: NumberFormatValues) => void;\n    highlight: boolean;\n    validatedSelection?: SelectionRange;\n}\n\nfunction getDecimalSeparator() {\n    const numberWithDecimalSeparator = 1.1;\n    const result = Intl.NumberFormat()\n        ?.formatToParts(numberWithDecimalSeparator)\n        ?.find(part => part.type === \"decimal\")?.value;\n\n    return result ?? \".\";\n}\n\nfunction getThousandSeprator() {\n    return getDecimalSeparator() === \".\" ? \",\" : \".\";\n}\n\nconst NumberOverlayEditor: React.FunctionComponent<Props> = p => {\n    const { value, onChange, disabled, highlight, validatedSelection } = p;\n\n    const inputRef = React.useRef<HTMLInputElement>();\n\n    React.useLayoutEffect(() => {\n        if (validatedSelection !== undefined) {\n            const range = typeof validatedSelection === \"number\" ? [validatedSelection, null] : validatedSelection;\n            inputRef.current?.setSelectionRange(range[0], range[1]);\n        }\n    }, [validatedSelection]);\n\n    return (\n        <NumberOverlayEditorStyle>\n            <NumericFormat\n                autoFocus={true}\n                getInputRef={inputRef}\n                className=\"gdg-input\"\n                onFocus={(e: React.FocusEvent<HTMLInputElement>) =>\n                    e.target.setSelectionRange(highlight ? 0 : e.target.value.length, e.target.value.length)\n                }\n                disabled={disabled === true}\n                thousandSeparator={getThousandSeprator()}\n                decimalSeparator={getDecimalSeparator()}\n                value={Object.is(value, -0) ? \"-\" : value ?? \"\"}\n                // decimalScale={3}\n                // prefix={\"$\"}\n                onValueChange={onChange}\n            />\n        </NumberOverlayEditorStyle>\n    );\n};\n\nexport default NumberOverlayEditor;\n", "import { styled } from \"@linaria/react\";\n\nexport const NumberOverlayEditorStyle = styled.div`\n    display: flex;\n    margin: 6px 0 3px;\n    color: var(--gdg-text-dark);\n\n    > input {\n        font-size: var(--gdg-editor-font-size);\n        padding: 0;\n        font-family: var(--gdg-font-family);\n        color: var(--gdg-text-dark);\n        background-color: var(--gdg-bg-cell);\n    }\n`;\n"],
  "mappings": ";;;;;;AAAA;;;ACEO,IAAM,2BAA2B,+BAA3B,KAAA,EAAA;EAAA,MAAA;EAAA,OAAA;AAAA,CAAA;;;ADAb;AAYA,+BAA+B;AAd/B;AAeI,QAAM,6BAA6B;AACnC,QAAM,SAAS,uBAAK,aAAA,MAAL,mBACT,cAAc,gCADL,mBAET,KAAK,CAAA,SAAQ,KAAK,SAAS,eAFlB,mBAE8B;AAE7C,SAAO,0BAAU;AAAA;AAGrB,+BAA+B;AAC3B,SAAO,oBAAA,MAA0B,MAAM,MAAM;AAAA;AAGjD,IAAM,sBAAsD,CAAA,MAAK;AAC7D,QAAM,EAAE,OAAO,UAAU,UAAU,WAAW,uBAAuB;AAErE,QAAM,WAAW,AAAM,aAAA;AAEvB,EAAM,sBAAgB,MAAM;AAhChC;AAiCQ,QAAI,uBAAuB,QAAW;AAClC,YAAM,QAAQ,OAAO,uBAAuB,WAAW,CAAC,oBAAoB,IAAA,IAAQ;AACpF,qBAAS,YAAT,mBAAkB,kBAAkB,MAAM,IAAI,MAAM;IAAA;EAAA,GAEzD,CAAC,kBAAA,CAAA;AAEJ,SACI,gBAAA,oBAAC,0BAAD,MACI,gBAAA,oBAAC,eAAD;IACI,WAAW;IACX,aAAa;IACb,WAAU;IACV,SAAS,CAAC,MACN,EAAE,OAAO,kBAAkB,YAAY,IAAI,EAAE,OAAO,MAAM,QAAQ,EAAE,OAAO,MAAM,MAAA;IAErF,UAAU,aAAa;IACvB,mBAAmB,oBAAA;IACnB,kBAAkB,oBAAA;IAClB,OAAO,OAAO,GAAG,OAAO,EAAA,IAAM,MAAM,wBAAS;IAG7C,eAAe;EAAA,CAAA,CAAA;AAAA;AAM/B,IAAA,gCAAe;",
  "names": []
}
